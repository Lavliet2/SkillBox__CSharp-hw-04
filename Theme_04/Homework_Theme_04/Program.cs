using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Homework_Theme_04_1
{
    class Program
    {
        static void Main(string[] args)
        {
            // Задание 1.
            // Заказчик просит вас написать приложение по учёту финансов
            // и продемонстрировать его работу.
            // Суть задачи в следующем: 
            // Руководство фирмы по 12 месяцам ведет учет расходов и поступлений средств. 
            // За год получены два массива – расходов и поступлений.
            // Определить прибыли по месяцам
            // Количество месяцев с положительной прибылью.
            // Добавить возможность вывода трех худших показателей по месяцам, с худшей прибылью, 
            // если есть несколько месяцев, в некоторых худшая прибыль совпала - вывести их все.
            // Организовать дружелюбный интерфейс взаимодействия и вывода данных на экран

            // Пример
            //       
            // Месяц      Доход, тыс. руб.  Расход, тыс. руб.     Прибыль, тыс. руб.
            //     1              100 000             80 000                 20 000
            //     2              120 000             90 000                 30 000
            //     3               80 000             70 000                 10 000
            //     4               70 000             70 000                      0
            //     5              100 000             80 000                 20 000
            //     6              200 000            120 000                 80 000
            //     7              130 000            140 000                -10 000
            //     8              150 000             65 000                 85 000
            //     9              190 000             90 000                100 000
            //    10              110 000             70 000                 40 000
            //    11              150 000            120 000                 30 000
            //    12              100 000             80 000                 20 000
            // 
            // Худшая прибыль в месяцах: 7, 4, 1, 5, 12
            // Месяцев с положительной прибылью: 10

            // Созвдём Header
            Console.OutputEncoding = System.Text.Encoding.UTF8; //Кодировка вывода консоли
            Console.Write("               Месяц ");
            Console.Write("     Доход, тыс.руб.");
            Console.Write("     Расход, тыс.руб.");
            Console.Write("    Прибыль, тыс.руб.");
            Console.WriteLine();

            int monthReport = 12;   // Количество месяцев для составления отчёта
            int[][] mainArry = new int[monthReport][]; // Массив таблицы отчёта
            Random random = new Random();
            // Создаётся 4 столбца (Певый - количество месяцев. Второй и третий - доход и расход из заданного диапазона, четвёртый - прибыль)
            for (int j = 0; j < mainArry.Length; j++)
            {
                mainArry[j] = new int[4];
            }
            // Заполнение первого столбца (Количество месяцев)
            for (int i = 0; i < mainArry.Length; i++)
            {
                mainArry[i][0] = i + 1;
            }
            // Заполнение второго столбца (Доход, заполняется случайными числами от 200000 до 400000)
            //int temp1 = 220_000; //  Переменная для теста программы
            for (int i = 0; i < mainArry.Length; i++)
            {
                mainArry[i][1] = random.Next(200_000, 400_000);
                // Заполнение второго столбца для теста программы
                /*
                mainArry[i][1] = temp1 + 2000;
                temp1 = 1000 + temp1;
                */
            }

            // Заполнение третьего столбца (Расход, заполняется случайными числами от 100000 до 400000 )
            for (int i = 0; i < mainArry.Length; i++)
            {
                mainArry[i][2] = random.Next(100_000, 400_000);
            }
            //  Заполнение третьего столбца вручную для тестов
            /*
            mainArry[0][2] = 20000;
            mainArry[1][2] = 21000;
            mainArry[2][2] = 19000;
            mainArry[3][2] = 20000;
            mainArry[4][2] = 20000;
            mainArry[5][2] = 20000;
            mainArry[6][2] = 21000;
            mainArry[7][2] = 30000;
            mainArry[8][2] = 33000;
            mainArry[9][2] = 20000;
            mainArry[10][2] = 20000;
            mainArry[11][2] = 36000;
            */

            // Разбиваем матрицу на три отдельных массива для вычисления прибыли
            int[] countDohod = new int[mainArry.Length]; // Столбец доход
            int[] countRashod = new int[mainArry.Length];// Столбец расход
            int[] countPribl = new int[mainArry.Length]; // Столбец прибыль
            //Вычисление прибыли (доход - расход)
            for (int i = 0; i < mainArry.Length; i++)
            {
                for (int j = 0; j < mainArry.Length; j++)
                {
                    countDohod[j] = mainArry[j][1];
                    countRashod[j] = mainArry[j][2];
                    countPribl[j] = countDohod[j] - countRashod[j];
                }
                // Заполнение четвёртого столбца (Прибыль)
                mainArry[i][3] = countPribl[i];
            }
            //Вывод таблицы в консоль
            foreach (var array in mainArry)
            {
                foreach (var e in array)
                {
                    Console.Write(string.Format($"{e,20} "));
                }
                Console.WriteLine();
            }


            // Создаём новый массив в котором доход отсортирован по возрастанию
            int[] badPribl = countPribl;
            int temp;
            for (int i = 0; i < badPribl.Length - 1; i++)
            {
                for (int j = i + 1; j < badPribl.Length; j++)
                    if (badPribl[i] > badPribl[j])
                    {
                        temp = badPribl[i];
                        badPribl[i] = badPribl[j];
                        badPribl[j] = temp;                        
                    }
            }
            // Почему-то после этого цикла у массива countPribl тоже происходит сортировка (я так и не понял почему)
            //for (int i = 0; i < badPribl.Length; i++)
            //{
            //    Console.WriteLine(badPribl[i]);
            //}


            // Создаём массив месяцев с плохой прибылью 
            int[] badMonth = new int[badPribl.Length];
            for (int i = 0; i < badPribl.Length; i++)
            {
                for (int j = 0; j < badPribl.Length; j++)
                    if (badPribl[i] == mainArry[j][3])
                    {
                        badMonth[i] = j + 1;
                        mainArry[j][3] = 0;
                        break;
                    }
            }

            int outMonth = 3; //Количество выведенных месяцев с плохой прибылью
            // Если плохая прибыль повторяется в нескольких месяцах, то количество выводимых месяцев увеличивается на 1
            for (int i = 0; i < outMonth; i++)
            {
                for (int j = i + 1; j < badPribl.Length; j++)
                {
                    if (badPribl[i] == badPribl[j])
                    {
                        outMonth += 1;                        
                    }
                }                
            }
            // Вывод месяцев с плохой прибылью
            Console.Write("               Худшая прибыль в месяцах: ");
            for (int i = 0; i < outMonth; i++)
            {
                Console.Write($"{badMonth[i]}, ");
            }
            Console.WriteLine();

            // Ещё раз заполняем массив с прибылью   (Потому что он отсортировался)
            for (int i = 0; i < mainArry.Length; i++)
            {
                countPribl[i] = countDohod[i] - countRashod[i];
            }
            int monthWithGoodPribl = 0;
            for (int i = 0; i < monthReport; i++)
            {
                if (countPribl[i] >= 0)
                {
                    monthWithGoodPribl += 1; 
                }
            }
            // Вывод количества месяцев с положительной прибылью
            Console.WriteLine($"               Месяцев с положительной прибылью: {monthWithGoodPribl}");
            Console.ReadKey();


                // * Задание 2
                // Заказчику требуется приложение строящее первых N строк треугольника паскаля. N < 25
                // 
                // При N = 9. Треугольник выглядит следующим образом:
                //                                 1
                //                             1       1
                //                         1       2       1
                //                     1       3       3       1
                //                 1       4       6       4       1
                //             1       5      10      10       5       1
                //         1       6      15      20      15       6       1
                //     1       7      21      35      35       21      7       1
                //                                                              
                //                                                              
                // Простое решение:                                                             
                // 1
                // 1       1
                // 1       2       1
                // 1       3       3       1
                // 1       4       6       4       1
                // 1       5      10      10       5       1
                // 1       6      15      20      15       6       1
                // 1       7      21      35      35       21      7       1
                // 
                // Справка: https://ru.wikipedia.org/wiki/Треугольник_Паскаля


                // 
                // * Задание 3.1
                // Заказчику требуется приложение позволяющщее умножать математическую матрицу на число
                // Справка https://ru.wikipedia.org/wiki/Матрица_(математика)
                // Справка https://ru.wikipedia.org/wiki/Матрица_(математика)#Умножение_матрицы_на_число
                // Добавить возможность ввода количество строк и столцов матрицы и число,
                // на которое будет производиться умножение.
                // Матрицы заполняются автоматически. 
                // Если по введённым пользователем данным действие произвести невозможно - сообщить об этом
                //
                // Пример
 
                //
                //
                // ** Задание 3.2
                // Заказчику требуется приложение позволяющщее складывать и вычитать математические матрицы
                // Справка https://ru.wikipedia.org/wiki/Матрица_(математика)
                // Справка https://ru.wikipedia.org/wiki/Матрица_(математика)#Сложение_матриц
                // Добавить возможность ввода количество строк и столцов матрицы.
                // Матрицы заполняются автоматически
                // Если по введённым пользователем данным действие произвести невозможно - сообщить об этом
                //
                // Пример
                //  |  1  3  5  |   |  1  3  4  |   |  2   6   9  |
                //  |  4  5  7  | + |  2  5  6  | = |  6  10  13  |
                //  |  5  3  1  |   |  3  6  7  |   |  8   9   8  |
                //  
                //  
                //  |  1  3  5  |   |  1  3  4  |   |  0   0   1  |
                //  |  4  5  7  | - |  2  5  6  | = |  2   0   1  |
                //  |  5  3  1  |   |  3  6  7  |   |  2  -3  -6  |
                //
                // *** Задание 3.3
                // Заказчику требуется приложение позволяющщее перемножать математические матрицы
                // Справка https://ru.wikipedia.org/wiki/Матрица_(математика)
                // Справка https://ru.wikipedia.org/wiki/Матрица_(математика)#Умножение_матриц
                // Добавить возможность ввода количество строк и столцов матрицы.
                // Матрицы заполняются автоматически
                // Если по введённым пользователем данным действие произвести нельзя - сообщить об этом
                //  
                //  |  1  3  5  |   |  1  3  4  |   | 22  48  57  |
                //  |  4  5  7  | х |  2  5  6  | = | 35  79  95  |
                //  |  5  3  1  |   |  3  6  7  |   | 14  36  45  |
                //
                //  
                //                  | 4 |   
                //  |  1  2  3  | х | 5 | = | 32 |
                //                  | 6 |  
                //
            }
        }
    }


